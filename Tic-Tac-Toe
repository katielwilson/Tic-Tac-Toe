import tkinter as tk
from tkinter import messagebox

# Initialize the main application window
root = tk.Tk()
root.title("Tic-Tac-Toe")
root.configure(bg="#F0F0F0")  # Light gray background

# Global variables
current_player = "X"
player1_score = 0
player2_score = 0
draws = 0
board = [[" " for _ in range(3)] for _ in range(3)]
buttons = []

# Function to update the game status
def update_status():
    status_label.config(text=f"Player 1 (X): {player1_score}  Player 2 (O): {player2_score}  Draws: {draws}")

# Function to check if there's a winner
def check_winner():
    global player1_score, player2_score, draws

    # Check rows, columns, and diagonals
    for i in range(3):
        if board[i][0] == board[i][1] == board[i][2] != " ":
            return board[i][0]
        if board[0][i] == board[1][i] == board[2][i] != " ":
            return board[0][i]

    if board[0][0] == board[1][1] == board[2][2] != " ":
        return board[0][0]
    if board[0][2] == board[1][1] == board[2][0] != " ":
        return board[0][2]

    if all(board[row][col] != " " for row in range(3) for col in range(3)):
        return "Draw"

    return None

# Function to handle button click
def button_click(row, col):
    global current_player

    if board[row][col] == " " and not check_winner():
        board[row][col] = current_player

        # Change button color and text color based on the current player
        if current_player == "X":
            buttons[row][col].config(text="X", bg="blue", fg="white", state="disabled")
        else:
            buttons[row][col].config(text="O", bg="red", fg="white", state="disabled")

        winner = check_winner()
        if winner:
            if winner == "Draw":
                messagebox.showinfo("Game Over", "It's a draw!")
                global draws
                draws += 1
            else:
                messagebox.showinfo("Game Over", f"Player {winner} wins!")
                if winner == "X":
                    global player1_score
                    player1_score += 3
                else:
                    global player2_score
                    player2_score += 3
            reset_board()
        else:
            current_player = "O" if current_player == "X" else "X"

        update_status()

# Function to reset the board (keeps scores)
def reset_board():
    global board, current_player
    board = [[" " for _ in range(3)] for _ in range(3)]
    current_player = "X"
    for row in range(3):
        for col in range(3):
            buttons[row][col].config(text=" ", bg="white", state="normal")  # Reset button color to white

# Function to reset the entire game (clears scores)
def reset_all():
    global player1_score, player2_score, draws
    player1_score = 0
    player2_score = 0
    draws = 0
    reset_board()
    update_status()

# Create GUI layout for buttons and status label
for row in range(3):
    row_buttons = []
    for col in range(3):
        button = tk.Button(root, text=" ", font=("Helvetica", 20), height=3, width=6,
                           bg="white",  # White background for each button
                           activebackground="#D3D3D3",  # Light gray when button is clicked
                           command=lambda r=row, c=col: button_click(r, c))
        button.grid(row=row, column=col, padx=5, pady=5)  # Add padding between buttons
        row_buttons.append(button)
    buttons.append(row_buttons)

# Add status and reset buttons
status_label = tk.Label(root, text="Player 1 (X): 0  Player 2 (O): 0  Draws: 0", font=("Helvetica", 14), bg="#F0F0F0")
status_label.grid(row=3, column=0, columnspan=3, pady=10)

reset_button = tk.Button(root, text="Reset Board", font=("Helvetica", 14), bg="#ADD8E6", command=reset_board)
reset_button.grid(row=4, column=0, pady=10)

reset_all_button = tk.Button(root, text="Reset All", font=("Helvetica", 14), bg="#FFCCCB", command=reset_all)
reset_all_button.grid(row=4, column=2, pady=10)

# Run the Tkinter main loop
root.mainloop()
